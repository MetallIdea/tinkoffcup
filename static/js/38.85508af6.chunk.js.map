{"version":3,"file":"static/js/38.85508af6.chunk.js","mappings":"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","sources":["core/components/form/FormField.tsx","modules/CostsForm/CostsForm.module.scss","modules/CostsForm/CostsFormFields.tsx","modules/CostsForm/CostsForm.tsx","modules/CostsForm/useCostsFormFormik.ts","store/CategoriesStore.ts","store/CostsStore.ts"],"sourcesContent":["import { PropsWithChildren } from 'react';\n\nexport type FormFieldProps = PropsWithChildren & {\n  name: string;\n  label?: string;\n  helpText?: string;\n  error?: string;\n  maxWidth?: string;\n}\n\nexport function FormField({ name, label, helpText, error, maxWidth, children }: FormFieldProps) {\n  return (\n    <div className=\"flex flex-column gap-2\" style={{maxWidth}}>\n      <label htmlFor={name}>{label}</label>\n      {children}\n      {\n        helpText ? (\n          <small id={`${name}-help`}>\n            {helpText}\n          </small>\n        ) : null\n      }\n      {\n        error ? (\n        <small id={`${name}-error`} className=\"p-error\">\n          {error}\n        </small>\n        ) : null\n      }\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {};","import { observer } from 'mobx-react-lite';\nimport { FormField } from '../../core/components/form/FormField';\nimport { InputText } from 'primereact/inputtext';\nimport { Form, useFormikContext } from 'formik';\nimport { FormValues } from './useCostsFormFormik';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { Button } from 'primereact/button';\nimport { useNavigate } from 'react-router-dom';\nimport { Calendar } from 'primereact/calendar';\nimport { AutoComplete, AutoCompleteCompleteEvent } from 'primereact/autocomplete';\nimport { categoriesStore } from '../../store/CategoriesStore';\nimport { useState } from 'react';\nimport { Category } from '../../core/types/costs';\nimport { InputNumber, InputNumberChangeEvent } from 'primereact/inputnumber';\n\nexport const CostsFormFields = observer(function CostsFormFields() {\n  const navigate = useNavigate();\n\n  const { values, errors, touched, setFieldValue, handleChange, handleBlur, resetForm } = useFormikContext<FormValues>();\n\n  const [categories, setCategories] = useState<Category[]>(categoriesStore.categories);\n\n  const handleCancel = () => {\n    resetForm();\n    navigate('/');\n  }\n\n  const handleSearch = ({ query }: AutoCompleteCompleteEvent) => {\n    setCategories(categoriesStore.findCategories(query));\n  }\n\n  const handleChangeCost = ({ value }: InputNumberChangeEvent) => {\n    setFieldValue('cost', value);\n  }\n\n  return (\n    <Form>\n      <FormField name=\"title\" label=\"Title\" error={touched.title ? errors.title : undefined}  maxWidth=\"500px\">\n        <InputText id=\"title\" name=\"title\" value={values.title} onChange={handleChange} onBlur={handleBlur} />\n      </FormField>\n      <FormField name=\"description\" label=\"Description\">\n        <InputTextarea id=\"description\" name=\"description\" value={values.description} onChange={handleChange} onBlur={handleBlur} />\n      </FormField>\n      <FormField name=\"date\" label=\"Date\" maxWidth=\"200px\">\n        <Calendar showIcon dateFormat=\"dd.mm.yy\" id=\"date\" name=\"date\" value={values.date} onChange={handleChange} onBlur={handleBlur} />\n      </FormField>\n      <FormField name=\"category\" label=\"Category\" maxWidth=\"500px\">\n        <AutoComplete\n          id=\"category\"\n          name=\"category\"\n          field=\"title\"\n          value={values.category}\n          suggestions={categories}\n          completeMethod={handleSearch}\n          onChange={handleChange}\n          dropdown />\n      </FormField>\n      <FormField name=\"cost\" label=\"Cost\" error={touched.cost ? errors.cost : undefined} maxWidth=\"500px\">\n        <InputNumber\n          id=\"cost\"\n          name=\"cost\"\n          value={values.cost}\n          onChange={handleChangeCost}\n          onBlur={handleBlur}\n          minFractionDigits={0}\n          maxFractionDigits={2}\n        />\n      </FormField>\n\n      <div className=\"flex\">\n        <Button type=\"button\" label=\"Cancel\" className=\"p-button-secondary\" onClick={handleCancel} />\n        <Button type=\"submit\" label=\"Submit\" />\n      </div>\n    </Form>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport styles from './CostsForm.module.scss';\nimport { Formik } from 'formik';\nimport { CostsFormFields } from './CostsFormFields';\nimport { FormValues, useCostsFormFormik } from './useCostsFormFormik';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { costsStore } from '../../store/CostsStore';\n\nexport const CostsForm = observer(function Template() {\n  const { id } = useParams<{\n    id: string;\n  }>();\n\n  useEffect(() => {\n    if (id && id !== 'new') {\n      costsStore.fetchCost(id);\n    }\n  })\n\n  const { initialValue, validate, handleSubmit } = useCostsFormFormik();\n\n  return (\n    <div className={styles.self}>\n      <Formik<FormValues> initialValues={initialValue} validate={validate} onSubmit={handleSubmit} enableReinitialize>\n        <CostsFormFields />\n      </Formik>\n    </div>\n  )\n});\n","import { FormikErrors, FormikHelpers } from 'formik';\nimport { costsStore } from '../../store/CostsStore';\nimport { useNavigate } from 'react-router-dom';\nimport { Category } from '../../core/types/costs';\nimport { categoriesStore } from '../../store/CategoriesStore';\n\nexport type FormValues = {\n  id: string;\n  title: string;\n  description: string;\n  date: Date;\n  category: Category | null;\n  cost: number;\n}\n\nexport function useCostsFormFormik() {\n  const navigate = useNavigate();\n\n  const initialValue: FormValues = {\n    id: costsStore.cost?.id ?? '',\n    title: costsStore.cost?.title ?? '',\n    description: costsStore.cost?.description ?? '',\n    date: costsStore.cost?.date ?? new Date(),\n    category: costsStore.cost?.category ?? null,\n    cost: costsStore.cost?.cost ?? 0,\n  }\n\n  const validate = (values: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!values.title) {\n      errors.title = 'Title is required';\n    }\n\n    if (!values.date) {\n      errors.date = 'Date is required';\n    }\n\n    if (!values.cost) {\n      errors.cost = 'Cost is required';\n    } else if (values.cost > 1000000000000) {\n      errors.cost = 'Cost cannot be more 1000000000000';\n    } else if (values.cost <= 0) {\n      errors.cost = 'Cost cannot be less or equal zero';\n    }\n\n\n    return errors;\n  }\n\n  const handleSubmit = (values: FormValues, { setSubmitting, resetForm }: FormikHelpers<FormValues>) => {\n    values.category = categoriesStore.ensureCategory(values.category);\n\n    if (costsStore.cost) {\n      costsStore.updateCost(values);\n    } else {\n      costsStore.createCost(values);\n    }\n\n    setSubmitting(false);\n\n    resetForm();\n\n    navigate('/');\n  }\n\n  return {\n    initialValue,\n    validate,\n    handleSubmit,\n  }\n}\n","import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Category } from '../core/types/costs';\n\nexport class CategoriesStore {\n  categories: Category[] = [];\n\n  categoriesModalVisible = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  findCategories(search: string): Category[] {\n    return this.categories.filter(({ title }) => title.includes(search));\n  }\n\n  ensureCategory(categoryValue: Category | string | null): Category | null {\n    if (typeof categoryValue === 'string') {\n      const category = this.categories.find(({ title }) => title === categoryValue);\n      if (!category) {\n        const newCategory = {\n          id: uuidv4(),\n          title: categoryValue\n        };\n        this.categories.push(newCategory);\n\n        return newCategory;\n      }\n\n      return category;\n    }\n\n    return categoryValue;\n  }\n\n  showCategoriesModal() {\n    this.categoriesModalVisible = true;\n  }\n\n  hideCategoriesModal() {\n    this.categoriesModalVisible = false;\n  }\n}\n\nexport const categoriesStore = new CategoriesStore();\n","import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Cost } from '../core/types/costs';\nimport { categoriesStore } from './CategoriesStore';\n\nexport class CostsStore {\n  categoriesStore = categoriesStore;\n\n  costs: Cost[] = [];\n\n  cost?: Cost;\n\n  filteredCosts: Cost[] = [];\n\n  searchFilter = '';\n\n  startDate: Date | null = null;\n\n  endDate: Date | null = null;\n\n  categoriesFilter: string | null = null;\n\n  deleteItemId: string | null = null;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  fetchCost(costId: string) {\n    this.cost = this.costs.find(({ id}) => id === costId);\n  }\n\n  setCost(cost: Cost) {\n    this.cost = cost;\n  }\n\n  createCost(cost: Cost): Cost {\n    cost.id = uuidv4();\n\n    this.costs.push(cost);\n\n    return cost;\n  }\n\n  updateCost(cost: Cost): Cost {\n    const index = this.costs.findIndex(({ id}) => id === cost.id);\n\n    if (index > -1) {\n      this.costs[index] = cost;\n    }\n\n    return cost;\n  }\n\n  deleteCost(costId: string): void {\n    const index = this.costs.findIndex(({ id}) => id === costId);\n\n    if (index > -1) {\n      this.costs.splice(index, 1);\n      this.filter();\n    }\n  }\n\n  filterCost(text: string): void {\n    this.searchFilter = text;\n    this.filter();\n  }\n\n  filterByStartDate(date: Date | null): void {\n    this.startDate = date;\n    this.filter();\n  }\n\n  filterByEndDate(date: Date | null): void {\n    this.endDate = date;\n    this.filter();\n  }\n\n  filterByCategories(category: string | null): void {\n    this.categoriesFilter = category;\n    this.filter();\n  }\n\n  filter() {\n    this.filteredCosts = this.costs.filter((cost) => {\n      let isFiltered = true;\n      if (this.searchFilter) {\n        isFiltered = isFiltered && cost.title.includes(this.searchFilter)\n      }\n      if (this.startDate) {\n        isFiltered = isFiltered\n          && cost.date.getTime() > this.startDate.getTime()\n      }\n      if (this.endDate) {\n        const endDate = new Date(this.endDate);\n        endDate.setDate(this.endDate.getDate() + 1)\n        isFiltered = isFiltered\n          && cost.date.getTime() < endDate.getTime()\n      }\n\n      if (this.categoriesFilter) {\n        isFiltered = isFiltered\n          && cost.category?.id === this.categoriesFilter;\n      }\n\n      return isFiltered;\n    }).sort((a, b) => {\n      return a.date > b.date ? -1 : 1;\n    });\n  }\n\n  resetFilter() {\n    this.searchFilter = '';\n    this.startDate = null;\n    this.endDate = null;\n    this.categoriesFilter = null;\n  }\n\n  showDeleteModal(id: string) {\n    this.deleteItemId = id;\n  }\n\n  hideDeleteModal() {\n    this.deleteItemId = null;\n  }\n}\n\nexport const costsStore = new CostsStore();\n"],"names":["FormField","_ref","name","label","helpText","error","maxWidth","children","_jsxs","className","style","_jsx","htmlFor","id","concat","CostsFormFields","observer","navigate","useNavigate","_useFormikContext","useFormikContext","values","errors","touched","setFieldValue","handleChange","handleBlur","resetForm","_useState","useState","categoriesStore","_useState2","_slicedToArray","categories","setCategories","Form","title","undefined","InputText","value","onChange","onBlur","InputTextarea","description","Calendar","showIcon","dateFormat","date","AutoComplete","field","category","suggestions","completeMethod","query","dropdown","cost","InputNumber","_ref2","minFractionDigits","maxFractionDigits","Button","type","onClick","CostsForm","useParams","useEffect","costsStore","_useCostsFormFormik","_costsStore$cost$id","_costsStore$cost","_costsStore$cost$titl","_costsStore$cost2","_costsStore$cost$desc","_costsStore$cost3","_costsStore$cost$date","_costsStore$cost4","_costsStore$cost$cate","_costsStore$cost5","_costsStore$cost$cost","_costsStore$cost6","initialValue","Date","validate","handleSubmit","setSubmitting","useCostsFormFormik","styles","Formik","initialValues","onSubmit","enableReinitialize","CategoriesStore","_classCallCheck","categoriesModalVisible","makeAutoObservable","this","_createClass","key","search","filter","includes","categoryValue","find","newCategory","uuidv4","push","CostsStore","costs","filteredCosts","searchFilter","startDate","endDate","categoriesFilter","deleteItemId","costId","index","findIndex","_ref3","splice","text","_this","_cost$category","isFiltered","getTime","setDate","getDate","sort","a","b"],"sourceRoot":""}